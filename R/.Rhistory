vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
cat("x:", x, "\n")
NA
} else {
median(x, na.rm = TRUE)
}
}
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
cat("x:", x, "\n")
NA
} else {
median(x, na.rm = TRUE)
}
}
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, , align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
cat("x:", x, "\n")
NA
} else {
median(x, na.rm = TRUE)
}
}
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = a, align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
cat("x:", x, "\n")
NA
} else {
median(x, na.rm = TRUE)
}
}
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = median(x, na.rm=TRUE), align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
cat("x:", x, "\n")
NA
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = median(x, na.rm=TRUE), align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
median(x)
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = median(x, na.rm=TRUE), align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
browser()
median(x, na.rm=TRUE)
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = median(x, na.rm=TRUE), align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
median(x, na.rm=TRUE)
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = median(x, na.rm=TRUE), align = "right")
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
median(x, na.rm=TRUE)
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
median(x, na.rm=FALSE)
} else {
median(x, na.rm = TRUE)
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
if (length(x) < 10) {
print(x)
median(x, na.rm=FALSE)
} else {
median(x, na.rm = TRUE)
}
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right")
result
calculate_median <- function(x) {
sapply(seq_along(x), function(i) median(x[1:i]))
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right", partial=TRUE)
result
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
calculate_median(1:5)
vet <- 1:20
result <- rollapply(vet, width = 10, FUN = calculate_median, fill = NA, align = "right", partial=TRUE)
result
library(zoo)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
# Group the data by player name and opponent
df <- df %>% group_by(Name, opp)
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG_opp = rollapply(FG, width = 10, FUN = median(x, na.rm = TRUE), fill = NA, align = "right",partial=TRUE))%>%
ungroup()
library(zoo)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
# Group the data by player name and opponent
df <- df %>% group_by(Name, opp)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG_opp = rollapply(FG, width = 10, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
df
df2 <- df %>%
arrange(season, season_month) %>%
select(opp, fg, L10_FG_opp)
df2 <- df %>%
arrange(season, season_month) %>%
select(Name,opp, FG, L10_FG_opp)
df2
df2 <- df %>%
arrange(season, season_month,opp) %>%
select(Name,opp, FG, L10_FG_opp)
df2
df2 <- df %>%
arrange(Name,season, season_month,opp) %>%
select(Name,opp, FG, L10_FG_opp)
df2
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(zoo)
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
df
# Group the data by player name and opponent
df <- df %>% group_by(Name)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG = rollapply(FG, width = 10, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
# Group the data by player name and opponent
df <- df %>% group_by(Name, opp)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG_opp = rollapply(FG, width = 10, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
df
names(df)
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate(column_name = rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste(column_name, "_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate(column_name_opp = rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
# Example usage
df <- calculate_rolling_median(df, "FG",10)
df <- calculate_rolling_median(df, "FGA",10)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate(paste0("L", n, "_", column) = rollapply(.data[[column]], width = n, FUN = calculate_median,
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" = rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste(column_name, "_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("column_name_opp" = rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
# Example usage
df <- calculate_rolling_median(df, "FG",10)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste(column_name, "_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("column_name_opp" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
# Example usage
df <- calculate_rolling_median(df, "FG",10)
df <- calculate_rolling_median(df, "FGA",10)
df
# Group the data by player name and opponent
df <- df %>% group_by(Name)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG = rollapply(FG, width = 10, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
# Group the data by player name and opponent
df <- df %>% group_by(Name, opp)
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm=TRUE)
}
# Apply the function to calculate the median using rolling window of size 10 and assign it to the "L10_FG_opp" column
df <- df %>%
mutate(L10_FG_opp = rollapply(FG, width = 10, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
df
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste0("L", n, "_", column,"_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("column_name_opp" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
# Example usage
df <- calculate_rolling_median(df, "FG",10)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste0("L", n, "_", column,"_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("{column_name_opp}" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
# Example usage
df <- calculate_rolling_median(df, "FG",10)
df
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(zoo)
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste0("L", n, "_", column,"_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("{column_name_opp}" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
columns_to_watch <- c("FG", "FGA", "3P", "3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS")
for (column in columns_to_watch) {
df <- calculate_rolling_medians(df, column, 10)
}
columns_to_watch <- c("FG", "FGA", "3P", "3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS")
for (column in columns_to_watch) {
df <- calculate_rolling_medians(df, column, 10)
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(zoo)
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste0("L", n, "_", column,"_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("{column_name_opp}" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
columns_to_watch <- c("FG", "FGA", "3P", "3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS")
for (column in columns_to_watch) {
df <- calculate_rolling_medians(df, column, 10)
}
df <- read_csv("data/cleanedData.csv")
columns_to_be_removed <- c("+/-", "TS%", "eFG%", "3PAr", "FTr", "ORB%", "DRB%", "TRB%", "AST%", "STL%", "BLK%", "TOV%", "USG%", "ORtg", "DRtg", "BPM", "date", "location", "year", "month", "day")
df <- df[, !(names(df) %in% columns_to_be_removed)]
df$home <- as.logical(df$home)
# Convert "opp" column to factor for grouping
df$opp <- as.factor(df$opp)
df
# Create a function to calculate the median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
# Function to calculate the rolling median for a given column
calculate_rolling_median <- function(data, column, n) {
data <- data %>% group_by(Name)
column_name <- paste0("L", n, "_", column)
# Apply the function to calculate the rolling median using a window of size 10
data <- data %>%
mutate("{column_name}" := rollapply(.data[[column]], width = n, FUN = calculate_median,
fill = NA, align = "right", partial = TRUE)) %>%
ungroup()
# Group the data by player name and opponent
data <- data %>% group_by(Name, opp)
column_name_opp <- paste0("L", n, "_", column,"_opp")
# Apply the function to calculate the median using rolling window of size 10 per opponent
data <- data %>%
mutate("{column_name_opp}" := rollapply(.data[[column]], width = n, FUN = calculate_median, fill = NA, align = "right",partial=TRUE))%>%
ungroup()
return(data)
}
columns_to_watch <- c("FG", "FGA", "3P", "3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS")
for (column in columns_to_watch) {
df <- calculate_rolling_medians(df, column, 10)
}
columns_to_watch <- c("FG", "FGA", "3P", "3PA", "FT", "FTA", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS")
for (column in columns_to_watch) {
df <- calculate_rolling_median(df, column, 10)
}
write.csv(df, file = "data/wtp.csv", row.names = FALSE)
df
